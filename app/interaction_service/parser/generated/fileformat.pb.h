// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fileformat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fileformat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fileformat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fileformat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fileformat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fileformat_2eproto;
namespace OSMPBF {
class Blob;
struct BlobDefaultTypeInternal;
extern BlobDefaultTypeInternal _Blob_default_instance_;
class BlobHeader;
struct BlobHeaderDefaultTypeInternal;
extern BlobHeaderDefaultTypeInternal _BlobHeader_default_instance_;
}  // namespace OSMPBF
PROTOBUF_NAMESPACE_OPEN
template<> ::OSMPBF::Blob* Arena::CreateMaybeMessage<::OSMPBF::Blob>(Arena*);
template<> ::OSMPBF::BlobHeader* Arena::CreateMaybeMessage<::OSMPBF::BlobHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace OSMPBF {

// ===================================================================

class Blob final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OSMPBF.Blob) */ {
 public:
  inline Blob() : Blob(nullptr) {}
  ~Blob() override;
  explicit constexpr Blob(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Blob(const Blob& from);
  Blob(Blob&& from) noexcept
    : Blob() {
    *this = ::std::move(from);
  }

  inline Blob& operator=(const Blob& from) {
    CopyFrom(from);
    return *this;
  }
  inline Blob& operator=(Blob&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Blob& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kRaw = 1,
    kZlibData = 3,
    kLzmaData = 4,
    kOBSOLETEBzip2Data = 5,
    kLz4Data = 6,
    kZstdData = 7,
    DATA_NOT_SET = 0,
  };

  static inline const Blob* internal_default_instance() {
    return reinterpret_cast<const Blob*>(
               &_Blob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Blob& a, Blob& b) {
    a.Swap(&b);
  }
  inline void Swap(Blob* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Blob* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Blob* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Blob>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Blob& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Blob& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Blob* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OSMPBF.Blob";
  }
  protected:
  explicit Blob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawSizeFieldNumber = 2,
    kRawFieldNumber = 1,
    kZlibDataFieldNumber = 3,
    kLzmaDataFieldNumber = 4,
    kOBSOLETEBzip2DataFieldNumber = 5,
    kLz4DataFieldNumber = 6,
    kZstdDataFieldNumber = 7,
  };
  // optional int32 raw_size = 2;
  bool has_raw_size() const;
  private:
  bool _internal_has_raw_size() const;
  public:
  void clear_raw_size();
  int32_t raw_size() const;
  void set_raw_size(int32_t value);
  private:
  int32_t _internal_raw_size() const;
  void _internal_set_raw_size(int32_t value);
  public:

  // bytes raw = 1;
  bool has_raw() const;
  private:
  bool _internal_has_raw() const;
  public:
  void clear_raw();
  const std::string& raw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_raw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_raw();
  PROTOBUF_NODISCARD std::string* release_raw();
  void set_allocated_raw(std::string* raw);
  private:
  const std::string& _internal_raw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw(const std::string& value);
  std::string* _internal_mutable_raw();
  public:

  // bytes zlib_data = 3;
  bool has_zlib_data() const;
  private:
  bool _internal_has_zlib_data() const;
  public:
  void clear_zlib_data();
  const std::string& zlib_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zlib_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zlib_data();
  PROTOBUF_NODISCARD std::string* release_zlib_data();
  void set_allocated_zlib_data(std::string* zlib_data);
  private:
  const std::string& _internal_zlib_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zlib_data(const std::string& value);
  std::string* _internal_mutable_zlib_data();
  public:

  // bytes lzma_data = 4;
  bool has_lzma_data() const;
  private:
  bool _internal_has_lzma_data() const;
  public:
  void clear_lzma_data();
  const std::string& lzma_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lzma_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lzma_data();
  PROTOBUF_NODISCARD std::string* release_lzma_data();
  void set_allocated_lzma_data(std::string* lzma_data);
  private:
  const std::string& _internal_lzma_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lzma_data(const std::string& value);
  std::string* _internal_mutable_lzma_data();
  public:

  // bytes OBSOLETE_bzip2_data = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_obsolete_bzip2_data() const;
  private:
  bool _internal_has_obsolete_bzip2_data() const;
  public:
  PROTOBUF_DEPRECATED void clear_obsolete_bzip2_data();
  PROTOBUF_DEPRECATED const std::string& obsolete_bzip2_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_obsolete_bzip2_data(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_obsolete_bzip2_data();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_obsolete_bzip2_data();
  PROTOBUF_DEPRECATED void set_allocated_obsolete_bzip2_data(std::string* obsolete_bzip2_data);
  private:
  const std::string& _internal_obsolete_bzip2_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_obsolete_bzip2_data(const std::string& value);
  std::string* _internal_mutable_obsolete_bzip2_data();
  public:

  // bytes lz4_data = 6;
  bool has_lz4_data() const;
  private:
  bool _internal_has_lz4_data() const;
  public:
  void clear_lz4_data();
  const std::string& lz4_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lz4_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lz4_data();
  PROTOBUF_NODISCARD std::string* release_lz4_data();
  void set_allocated_lz4_data(std::string* lz4_data);
  private:
  const std::string& _internal_lz4_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lz4_data(const std::string& value);
  std::string* _internal_mutable_lz4_data();
  public:

  // bytes zstd_data = 7;
  bool has_zstd_data() const;
  private:
  bool _internal_has_zstd_data() const;
  public:
  void clear_zstd_data();
  const std::string& zstd_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zstd_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zstd_data();
  PROTOBUF_NODISCARD std::string* release_zstd_data();
  void set_allocated_zstd_data(std::string* zstd_data);
  private:
  const std::string& _internal_zstd_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zstd_data(const std::string& value);
  std::string* _internal_mutable_zstd_data();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:OSMPBF.Blob)
 private:
  class _Internal;
  void set_has_raw();
  void set_has_zlib_data();
  void set_has_lzma_data();
  void set_has_obsolete_bzip2_data();
  void set_has_lz4_data();
  void set_has_zstd_data();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t raw_size_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zlib_data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lzma_data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obsolete_bzip2_data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lz4_data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zstd_data_;
  } data_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_fileformat_2eproto;
};
// -------------------------------------------------------------------

class BlobHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OSMPBF.BlobHeader) */ {
 public:
  inline BlobHeader() : BlobHeader(nullptr) {}
  ~BlobHeader() override;
  explicit constexpr BlobHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlobHeader(const BlobHeader& from);
  BlobHeader(BlobHeader&& from) noexcept
    : BlobHeader() {
    *this = ::std::move(from);
  }

  inline BlobHeader& operator=(const BlobHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlobHeader& operator=(BlobHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlobHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlobHeader* internal_default_instance() {
    return reinterpret_cast<const BlobHeader*>(
               &_BlobHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlobHeader& a, BlobHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(BlobHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlobHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlobHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlobHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlobHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlobHeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlobHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OSMPBF.BlobHeader";
  }
  protected:
  explicit BlobHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kIndexdataFieldNumber = 2,
    kDatasizeFieldNumber = 3,
  };
  // required string type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional bytes indexdata = 2;
  bool has_indexdata() const;
  private:
  bool _internal_has_indexdata() const;
  public:
  void clear_indexdata();
  const std::string& indexdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_indexdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_indexdata();
  PROTOBUF_NODISCARD std::string* release_indexdata();
  void set_allocated_indexdata(std::string* indexdata);
  private:
  const std::string& _internal_indexdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_indexdata(const std::string& value);
  std::string* _internal_mutable_indexdata();
  public:

  // required int32 datasize = 3;
  bool has_datasize() const;
  private:
  bool _internal_has_datasize() const;
  public:
  void clear_datasize();
  int32_t datasize() const;
  void set_datasize(int32_t value);
  private:
  int32_t _internal_datasize() const;
  void _internal_set_datasize(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:OSMPBF.BlobHeader)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr indexdata_;
  int32_t datasize_;
  friend struct ::TableStruct_fileformat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Blob

// optional int32 raw_size = 2;
inline bool Blob::_internal_has_raw_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Blob::has_raw_size() const {
  return _internal_has_raw_size();
}
inline void Blob::clear_raw_size() {
  raw_size_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t Blob::_internal_raw_size() const {
  return raw_size_;
}
inline int32_t Blob::raw_size() const {
  // @@protoc_insertion_point(field_get:OSMPBF.Blob.raw_size)
  return _internal_raw_size();
}
inline void Blob::_internal_set_raw_size(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  raw_size_ = value;
}
inline void Blob::set_raw_size(int32_t value) {
  _internal_set_raw_size(value);
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.raw_size)
}

// bytes raw = 1;
inline bool Blob::_internal_has_raw() const {
  return data_case() == kRaw;
}
inline bool Blob::has_raw() const {
  return _internal_has_raw();
}
inline void Blob::set_has_raw() {
  _oneof_case_[0] = kRaw;
}
inline void Blob::clear_raw() {
  if (_internal_has_raw()) {
    data_.raw_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_data();
  }
}
inline const std::string& Blob::raw() const {
  // @@protoc_insertion_point(field_get:OSMPBF.Blob.raw)
  return _internal_raw();
}
template <typename ArgT0, typename... ArgT>
inline void Blob::set_raw(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.raw_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.raw)
}
inline std::string* Blob::mutable_raw() {
  std::string* _s = _internal_mutable_raw();
  // @@protoc_insertion_point(field_mutable:OSMPBF.Blob.raw)
  return _s;
}
inline const std::string& Blob::_internal_raw() const {
  if (_internal_has_raw()) {
    return data_.raw_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Blob::_internal_set_raw(const std::string& value) {
  if (!_internal_has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.raw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Blob::_internal_mutable_raw() {
  if (!_internal_has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.raw_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Blob::release_raw() {
  // @@protoc_insertion_point(field_release:OSMPBF.Blob.raw)
  if (_internal_has_raw()) {
    clear_has_data();
    return data_.raw_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Blob::set_allocated_raw(std::string* raw) {
  if (has_data()) {
    clear_data();
  }
  if (raw != nullptr) {
    set_has_raw();
    data_.raw_.UnsafeSetDefault(raw);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(raw);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:OSMPBF.Blob.raw)
}

// bytes zlib_data = 3;
inline bool Blob::_internal_has_zlib_data() const {
  return data_case() == kZlibData;
}
inline bool Blob::has_zlib_data() const {
  return _internal_has_zlib_data();
}
inline void Blob::set_has_zlib_data() {
  _oneof_case_[0] = kZlibData;
}
inline void Blob::clear_zlib_data() {
  if (_internal_has_zlib_data()) {
    data_.zlib_data_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_data();
  }
}
inline const std::string& Blob::zlib_data() const {
  // @@protoc_insertion_point(field_get:OSMPBF.Blob.zlib_data)
  return _internal_zlib_data();
}
template <typename ArgT0, typename... ArgT>
inline void Blob::set_zlib_data(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_zlib_data()) {
    clear_data();
    set_has_zlib_data();
    data_.zlib_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.zlib_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.zlib_data)
}
inline std::string* Blob::mutable_zlib_data() {
  std::string* _s = _internal_mutable_zlib_data();
  // @@protoc_insertion_point(field_mutable:OSMPBF.Blob.zlib_data)
  return _s;
}
inline const std::string& Blob::_internal_zlib_data() const {
  if (_internal_has_zlib_data()) {
    return data_.zlib_data_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Blob::_internal_set_zlib_data(const std::string& value) {
  if (!_internal_has_zlib_data()) {
    clear_data();
    set_has_zlib_data();
    data_.zlib_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.zlib_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Blob::_internal_mutable_zlib_data() {
  if (!_internal_has_zlib_data()) {
    clear_data();
    set_has_zlib_data();
    data_.zlib_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.zlib_data_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Blob::release_zlib_data() {
  // @@protoc_insertion_point(field_release:OSMPBF.Blob.zlib_data)
  if (_internal_has_zlib_data()) {
    clear_has_data();
    return data_.zlib_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Blob::set_allocated_zlib_data(std::string* zlib_data) {
  if (has_data()) {
    clear_data();
  }
  if (zlib_data != nullptr) {
    set_has_zlib_data();
    data_.zlib_data_.UnsafeSetDefault(zlib_data);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(zlib_data);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:OSMPBF.Blob.zlib_data)
}

// bytes lzma_data = 4;
inline bool Blob::_internal_has_lzma_data() const {
  return data_case() == kLzmaData;
}
inline bool Blob::has_lzma_data() const {
  return _internal_has_lzma_data();
}
inline void Blob::set_has_lzma_data() {
  _oneof_case_[0] = kLzmaData;
}
inline void Blob::clear_lzma_data() {
  if (_internal_has_lzma_data()) {
    data_.lzma_data_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_data();
  }
}
inline const std::string& Blob::lzma_data() const {
  // @@protoc_insertion_point(field_get:OSMPBF.Blob.lzma_data)
  return _internal_lzma_data();
}
template <typename ArgT0, typename... ArgT>
inline void Blob::set_lzma_data(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_lzma_data()) {
    clear_data();
    set_has_lzma_data();
    data_.lzma_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.lzma_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.lzma_data)
}
inline std::string* Blob::mutable_lzma_data() {
  std::string* _s = _internal_mutable_lzma_data();
  // @@protoc_insertion_point(field_mutable:OSMPBF.Blob.lzma_data)
  return _s;
}
inline const std::string& Blob::_internal_lzma_data() const {
  if (_internal_has_lzma_data()) {
    return data_.lzma_data_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Blob::_internal_set_lzma_data(const std::string& value) {
  if (!_internal_has_lzma_data()) {
    clear_data();
    set_has_lzma_data();
    data_.lzma_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.lzma_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Blob::_internal_mutable_lzma_data() {
  if (!_internal_has_lzma_data()) {
    clear_data();
    set_has_lzma_data();
    data_.lzma_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.lzma_data_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Blob::release_lzma_data() {
  // @@protoc_insertion_point(field_release:OSMPBF.Blob.lzma_data)
  if (_internal_has_lzma_data()) {
    clear_has_data();
    return data_.lzma_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Blob::set_allocated_lzma_data(std::string* lzma_data) {
  if (has_data()) {
    clear_data();
  }
  if (lzma_data != nullptr) {
    set_has_lzma_data();
    data_.lzma_data_.UnsafeSetDefault(lzma_data);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(lzma_data);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:OSMPBF.Blob.lzma_data)
}

// bytes OBSOLETE_bzip2_data = 5 [deprecated = true];
inline bool Blob::_internal_has_obsolete_bzip2_data() const {
  return data_case() == kOBSOLETEBzip2Data;
}
inline bool Blob::has_obsolete_bzip2_data() const {
  return _internal_has_obsolete_bzip2_data();
}
inline void Blob::set_has_obsolete_bzip2_data() {
  _oneof_case_[0] = kOBSOLETEBzip2Data;
}
inline void Blob::clear_obsolete_bzip2_data() {
  if (_internal_has_obsolete_bzip2_data()) {
    data_.obsolete_bzip2_data_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_data();
  }
}
inline const std::string& Blob::obsolete_bzip2_data() const {
  // @@protoc_insertion_point(field_get:OSMPBF.Blob.OBSOLETE_bzip2_data)
  return _internal_obsolete_bzip2_data();
}
template <typename ArgT0, typename... ArgT>
inline void Blob::set_obsolete_bzip2_data(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_obsolete_bzip2_data()) {
    clear_data();
    set_has_obsolete_bzip2_data();
    data_.obsolete_bzip2_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.obsolete_bzip2_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.OBSOLETE_bzip2_data)
}
inline std::string* Blob::mutable_obsolete_bzip2_data() {
  std::string* _s = _internal_mutable_obsolete_bzip2_data();
  // @@protoc_insertion_point(field_mutable:OSMPBF.Blob.OBSOLETE_bzip2_data)
  return _s;
}
inline const std::string& Blob::_internal_obsolete_bzip2_data() const {
  if (_internal_has_obsolete_bzip2_data()) {
    return data_.obsolete_bzip2_data_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Blob::_internal_set_obsolete_bzip2_data(const std::string& value) {
  if (!_internal_has_obsolete_bzip2_data()) {
    clear_data();
    set_has_obsolete_bzip2_data();
    data_.obsolete_bzip2_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.obsolete_bzip2_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Blob::_internal_mutable_obsolete_bzip2_data() {
  if (!_internal_has_obsolete_bzip2_data()) {
    clear_data();
    set_has_obsolete_bzip2_data();
    data_.obsolete_bzip2_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.obsolete_bzip2_data_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Blob::release_obsolete_bzip2_data() {
  // @@protoc_insertion_point(field_release:OSMPBF.Blob.OBSOLETE_bzip2_data)
  if (_internal_has_obsolete_bzip2_data()) {
    clear_has_data();
    return data_.obsolete_bzip2_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Blob::set_allocated_obsolete_bzip2_data(std::string* obsolete_bzip2_data) {
  if (has_data()) {
    clear_data();
  }
  if (obsolete_bzip2_data != nullptr) {
    set_has_obsolete_bzip2_data();
    data_.obsolete_bzip2_data_.UnsafeSetDefault(obsolete_bzip2_data);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(obsolete_bzip2_data);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:OSMPBF.Blob.OBSOLETE_bzip2_data)
}

// bytes lz4_data = 6;
inline bool Blob::_internal_has_lz4_data() const {
  return data_case() == kLz4Data;
}
inline bool Blob::has_lz4_data() const {
  return _internal_has_lz4_data();
}
inline void Blob::set_has_lz4_data() {
  _oneof_case_[0] = kLz4Data;
}
inline void Blob::clear_lz4_data() {
  if (_internal_has_lz4_data()) {
    data_.lz4_data_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_data();
  }
}
inline const std::string& Blob::lz4_data() const {
  // @@protoc_insertion_point(field_get:OSMPBF.Blob.lz4_data)
  return _internal_lz4_data();
}
template <typename ArgT0, typename... ArgT>
inline void Blob::set_lz4_data(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_lz4_data()) {
    clear_data();
    set_has_lz4_data();
    data_.lz4_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.lz4_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.lz4_data)
}
inline std::string* Blob::mutable_lz4_data() {
  std::string* _s = _internal_mutable_lz4_data();
  // @@protoc_insertion_point(field_mutable:OSMPBF.Blob.lz4_data)
  return _s;
}
inline const std::string& Blob::_internal_lz4_data() const {
  if (_internal_has_lz4_data()) {
    return data_.lz4_data_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Blob::_internal_set_lz4_data(const std::string& value) {
  if (!_internal_has_lz4_data()) {
    clear_data();
    set_has_lz4_data();
    data_.lz4_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.lz4_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Blob::_internal_mutable_lz4_data() {
  if (!_internal_has_lz4_data()) {
    clear_data();
    set_has_lz4_data();
    data_.lz4_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.lz4_data_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Blob::release_lz4_data() {
  // @@protoc_insertion_point(field_release:OSMPBF.Blob.lz4_data)
  if (_internal_has_lz4_data()) {
    clear_has_data();
    return data_.lz4_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Blob::set_allocated_lz4_data(std::string* lz4_data) {
  if (has_data()) {
    clear_data();
  }
  if (lz4_data != nullptr) {
    set_has_lz4_data();
    data_.lz4_data_.UnsafeSetDefault(lz4_data);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(lz4_data);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:OSMPBF.Blob.lz4_data)
}

// bytes zstd_data = 7;
inline bool Blob::_internal_has_zstd_data() const {
  return data_case() == kZstdData;
}
inline bool Blob::has_zstd_data() const {
  return _internal_has_zstd_data();
}
inline void Blob::set_has_zstd_data() {
  _oneof_case_[0] = kZstdData;
}
inline void Blob::clear_zstd_data() {
  if (_internal_has_zstd_data()) {
    data_.zstd_data_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_data();
  }
}
inline const std::string& Blob::zstd_data() const {
  // @@protoc_insertion_point(field_get:OSMPBF.Blob.zstd_data)
  return _internal_zstd_data();
}
template <typename ArgT0, typename... ArgT>
inline void Blob::set_zstd_data(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_zstd_data()) {
    clear_data();
    set_has_zstd_data();
    data_.zstd_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.zstd_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OSMPBF.Blob.zstd_data)
}
inline std::string* Blob::mutable_zstd_data() {
  std::string* _s = _internal_mutable_zstd_data();
  // @@protoc_insertion_point(field_mutable:OSMPBF.Blob.zstd_data)
  return _s;
}
inline const std::string& Blob::_internal_zstd_data() const {
  if (_internal_has_zstd_data()) {
    return data_.zstd_data_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Blob::_internal_set_zstd_data(const std::string& value) {
  if (!_internal_has_zstd_data()) {
    clear_data();
    set_has_zstd_data();
    data_.zstd_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.zstd_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Blob::_internal_mutable_zstd_data() {
  if (!_internal_has_zstd_data()) {
    clear_data();
    set_has_zstd_data();
    data_.zstd_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.zstd_data_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Blob::release_zstd_data() {
  // @@protoc_insertion_point(field_release:OSMPBF.Blob.zstd_data)
  if (_internal_has_zstd_data()) {
    clear_has_data();
    return data_.zstd_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Blob::set_allocated_zstd_data(std::string* zstd_data) {
  if (has_data()) {
    clear_data();
  }
  if (zstd_data != nullptr) {
    set_has_zstd_data();
    data_.zstd_data_.UnsafeSetDefault(zstd_data);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(zstd_data);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:OSMPBF.Blob.zstd_data)
}

inline bool Blob::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void Blob::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline Blob::DataCase Blob::data_case() const {
  return Blob::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BlobHeader

// required string type = 1;
inline bool BlobHeader::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BlobHeader::has_type() const {
  return _internal_has_type();
}
inline void BlobHeader::clear_type() {
  type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BlobHeader::type() const {
  // @@protoc_insertion_point(field_get:OSMPBF.BlobHeader.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlobHeader::set_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OSMPBF.BlobHeader.type)
}
inline std::string* BlobHeader::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:OSMPBF.BlobHeader.type)
  return _s;
}
inline const std::string& BlobHeader::_internal_type() const {
  return type_.Get();
}
inline void BlobHeader::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BlobHeader::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BlobHeader::release_type() {
  // @@protoc_insertion_point(field_release:OSMPBF.BlobHeader.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BlobHeader::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OSMPBF.BlobHeader.type)
}

// optional bytes indexdata = 2;
inline bool BlobHeader::_internal_has_indexdata() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BlobHeader::has_indexdata() const {
  return _internal_has_indexdata();
}
inline void BlobHeader::clear_indexdata() {
  indexdata_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BlobHeader::indexdata() const {
  // @@protoc_insertion_point(field_get:OSMPBF.BlobHeader.indexdata)
  return _internal_indexdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlobHeader::set_indexdata(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 indexdata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OSMPBF.BlobHeader.indexdata)
}
inline std::string* BlobHeader::mutable_indexdata() {
  std::string* _s = _internal_mutable_indexdata();
  // @@protoc_insertion_point(field_mutable:OSMPBF.BlobHeader.indexdata)
  return _s;
}
inline const std::string& BlobHeader::_internal_indexdata() const {
  return indexdata_.Get();
}
inline void BlobHeader::_internal_set_indexdata(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  indexdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BlobHeader::_internal_mutable_indexdata() {
  _has_bits_[0] |= 0x00000002u;
  return indexdata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BlobHeader::release_indexdata() {
  // @@protoc_insertion_point(field_release:OSMPBF.BlobHeader.indexdata)
  if (!_internal_has_indexdata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = indexdata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (indexdata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    indexdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BlobHeader::set_allocated_indexdata(std::string* indexdata) {
  if (indexdata != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  indexdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), indexdata,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (indexdata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    indexdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OSMPBF.BlobHeader.indexdata)
}

// required int32 datasize = 3;
inline bool BlobHeader::_internal_has_datasize() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BlobHeader::has_datasize() const {
  return _internal_has_datasize();
}
inline void BlobHeader::clear_datasize() {
  datasize_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t BlobHeader::_internal_datasize() const {
  return datasize_;
}
inline int32_t BlobHeader::datasize() const {
  // @@protoc_insertion_point(field_get:OSMPBF.BlobHeader.datasize)
  return _internal_datasize();
}
inline void BlobHeader::_internal_set_datasize(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  datasize_ = value;
}
inline void BlobHeader::set_datasize(int32_t value) {
  _internal_set_datasize(value);
  // @@protoc_insertion_point(field_set:OSMPBF.BlobHeader.datasize)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace OSMPBF

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fileformat_2eproto
